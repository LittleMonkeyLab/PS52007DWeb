{
  "hash": "c7e3454fa23050ab3654274c04ee5972",
  "result": {
    "markdown": "---\ntitle: \"Lab 1 - Data visualization\"\ncategories: \"Lab\"\nexecute:\n  eval: false\n---\n\n\n\n::: callout-important\nThis lab is due Friday, Sep 9 at 11:59pm.\n:::\n\n# Learning goals\n\nIn this lab, you will...\n\n-   learn how to effectively visualize numeric and categorical data.\n-   continue developing a workflow for reproducible data analysis.\n\n# Getting started\n\n-   Go to the [**sta199-f22-1**](https://www.github.com/sta199-f22-1)\n    organization on GitHub. Click on the repo with the prefix\n    **lab-01**. It contains the starter documents you need to complete\n    the lab.\n\n-   Clone the repo and start a new project in RStudio. See the [Lab 0\n    instructions](https://sta199-f22-1.github.io/labs/lab-0.html#clone-the-repo-start-new-rstudio-project)\n    for details on cloning a repo and starting a new R project.\n\n## Packages\n\nWe will use the **tidyverse** package to create and customize plots in\nR.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(viridis)\n```\n:::\n\n\n\n## Data: Let's take a trip to the Midwest\n\nThe data in this lab is in the `midwest` data frame. It is part of the\n**ggplot2** R package, so the `midwest` data set is automatically loaded\nwhen you load the tidyverse package.\n\nThe data contains demographic characteristics of counties in the Midwest\nregion of the United States.\n\nBecause the data set is part of the **ggplot2** package, you can read\ndocumentation for the data set, including variable definitions by typing\n`?midwest` in the **console**.\n\n# Exercises\n\nAs we've discussed in lecture, your plots should include an informative\ntitle, axes should be labeled, and careful consideration should be given\nto aesthetic choices.\n\nIn addition, the code should not exceed the 80 character limit, so that\nall the code can be read when you render to PDF. To help with this, you\ncan add a vertical line at 80 characters by clicking \"Tools\"\n$\\rightarrow$ \"Global Options\" $\\rightarrow$ \"Code\" $\\rightarrow$\n\"Display\", then set \"Margin Column\" to 80, and click \"Apply\".\n\nRemember that continuing to develop a sound workflow for reproducible\ndata analysis is important as you complete the lab and other assignments\nin this course. There will be periodic reminders in this assignment to\nremind you to **render, commit, and push** your changes to GitHub. You\nshould have at least 3 commits with meaningful commit messages by the\nend of the assignment.\n\n1.  Make a histogram to visualize the population density of counties.\n    Set the number of bins to 10 and include axes labels and a title.\n    -   Describe the shape of the distribution.\n    -   Does there appear to be are any outliers? Briefly explain.\n\n::: callout-note\nFor more details and code examples for histograms [ggplot2 reference\npage](https://ggplot2.tidyverse.org/reference/geom_histogram.html).\n:::\n\n2.  Create a scatterplot of the percentage of people with a college\n    degree (`percollege`) versus percentage below poverty\n    (`percbelowpoverty`) with points colored by `state`. Label the axes\n    and legend and give the plot a title. Use the `scale_color_viridis`\n    function to apply the viridis color palette to your plot.\n\n::: callout-note\nSee [*Introduction to the viridis color\nmaps*](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)\nto read more about the viridis R package and see code examples.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message\n\"Added answer for Ex 1 -2\".\n\nMake sure to commit and push all changed files so that your Git pane is\nempty afterwards.\n:::\n\n3.  Describe what you observe in the plot from the previous exercise. In\n    your description, include similarities and differences in the\n    patterns across states.\n\n4.  Now, let's examine the relationship between the same two variables,\n    using a separate plot for each state. Label the axes and give the\n    plot a title. Use `geom_smooth` with the argument `se = FALSE` to\n    add a smooth curve fit to the data. Which plot do you prefer - this\n    plot or the plot in Ex 2? Briefly explain your choice.\n\n::: callout-note\n`se = FALSE` removes the confidence bands around the line. These bands\nshow the uncertainty around the smooth curve. We'll discuss uncertainty\naround estimates later in the course and bring these bands back then.\n:::\n\n::: render-commit-push\nNow is another good time to render, commit, and push your changes to\nGitHub with a meaningful commit message.\n\nOnce again, make sure to commit and push all changed files so that your\nGit pane is empty afterwards.\n:::\n\n5.  *Do some states have counties that tend to be geographically larger\n    than others?* To explore this question, create side-by-side boxplots\n    of area (`area`) of a county based on state (`state`).\n    -   Describe what you observe from the plot.\n    -   Which state has the single largest county? How do you know based\n        on the plot?\n6.  *Do some states have a higher percentage of their counties located\n    in a metropolitan area?* Create a segmented bar chart with one bar\n    per state and the fill determined by the distribution of `metro`,\n    whether a county is considered in a metro area. The y axis of the\n    segmented barplot should range from 0 to 1.\n    -   What do you notice from the plot?\n\n::: callout-note\nFor this exercise, you should begin with the data wrangling code below.\nWe will learn more about data wrangling next week.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest <- midwest %>%\n  mutate(metro = ifelse(inmetro == 1, \"Yes\", \"No\"))\n```\n:::\n\n\n\n::: render-commit-push\nNow is another good time to render, commit, and push your changes to\nGitHub with a meaningful commit message.\n\nAnd once again, make sure to commit and push all changed files so that\nyour Git pane is empty afterwards. We keep repeating this because it's\nimportant, and because we see students forget to do this. So take a\nmoment to make sure you're following along with the instructions around\nGit.\n:::\n\n7.  Recreate the plot below.\n\nHints:\n\n-   [The `ggplot2` reference for\n    themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) will\n    be helpful in determining the theme.\n-   The `size` of the points is 2.\n-   The transparency (`alhpa`) of the points is 0.5.\n-   You can put line breaks in labels with `\\n`.\n\n![](images/lab-1/ex-7.png)\n\n::: render-commit-push\nRender, commit, and push your final changes to GitHub with a meaningful\ncommit message.\n\nMake sure to commit and push all changed files so that your Git pane is\nempty afterwards.\n:::\n\n# Submission\n\nOnce you are finished with the lab, you will your final PDF document to\nGradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated\non your GitHub repo. We will be checking these to make sure you have\nbeen practicing how to commit and push changes.\n\nYou must turn in a PDF file to the Gradescope page by the submission\ndeadline to be considered \"on time\".\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top\n    right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in\n    using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with exercise. All the pages of your\n    lab should be associated with at least one question (i.e., should be\n    \"checked\").\n-   Select the first page of your .pdf submission to be associated with\n    the *\"Workflow & formatting\"* question.\n\n# Grading (50 pts)\n\n| Component             | Points |\n|:----------------------|:-------|\n| Ex 1                  | 4      |\n| Ex 2                  | 6      |\n| Ex 3                  | 4      |\n| Ex 4                  | 8      |\n| Ex 5                  | 6      |\n| Ex 6                  | 6      |\n| Ex 7                  | 8      |\n| Workflow & formatting | 8      |\n\n::: callout-note\nThe \"Workflow & formatting\" grade is to assess the reproducible\nworkflow. This includes having at least 3 informative commit messages,\nlabeling the code chunks, and having readable code that does not exceed\n80 characters, i.e., we can read all your code in the rendered PDF.\n:::\n",
    "supporting": [
      "lab-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}